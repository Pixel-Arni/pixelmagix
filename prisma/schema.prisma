// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// ===== KUNDENVERWALTUNG =====

model Customer {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  phone       String?
  company     String?
  website     String?
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Beziehungen
  projects    Project[]
  invoices    Invoice[]
  assets      Asset[]     // Hinzugefügte Beziehung
  
  @@map("customers")
}

// ===== PROJEKTMANAGEMENT =====

model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  status      ProjectStatus @default(DRAFT)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // Kunde-Beziehung
  customerId  String
  customer    Customer      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  
  // Projektdaten (als String für SQLite)
  config      String?       // Projekt-Konfiguration (JSON als String)
  content     String?       // Inhalte (JSON als String)
  
  // Beziehungen
  versions    ProjectVersion[]
  exports     ProjectExport[]
  aiInteractions AiInteraction[] // Hinzugefügte Beziehung
  
  @@map("projects")
}

model ProjectVersion {
  id          String   @id @default(cuid())
  version     String   // z.B. "1.0.0", "1.1.0"
  changelog   String?
  data        String   // Snapshot der Projektdaten (JSON als String)
  createdAt   DateTime @default(now())
  
  // Projekt-Beziehung
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@map("project_versions")
}

model ProjectExport {
  id          String     @id @default(cuid())
  filename    String
  filePath    String
  fileSize    Int
  exportType  ExportType @default(ZIP)
  createdAt   DateTime   @default(now())
  
  // Projekt-Beziehung
  projectId   String
  project     Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@map("project_exports")
}

// ===== TEMPLATES & LAYOUTS =====

model Template {
  id          String       @id @default(cuid())
  name        String
  description String?
  category    String       // z.B. "business", "portfolio", "ecommerce"
  thumbnail   String?      // Pfad zum Vorschaubild
  data        String       // Template-Struktur (JSON als String)
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  @@map("templates")
}

model Section {
  id          String      @id @default(cuid())
  name        String
  type        SectionType
  description String?
  thumbnail   String?
  data        String      // Sektion-Struktur (JSON als String)
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  @@map("sections")
}

// ===== ASSET-VERWALTUNG =====

model Asset {
  id          String    @id @default(cuid())
  filename    String
  originalName String
  filePath    String
  fileSize    Int
  mimeType    String
  alt         String?
  tags        String?   // Comma-separated tags
  createdAt   DateTime  @default(now())
  
  // Optional: Customer-spezifische Assets
  customerId  String?
  customer    Customer? @relation(fields: [customerId], references: [id], onDelete: SetNull)
  
  @@map("assets")
}

// ===== RECHNUNGSVERWALTUNG =====

model Invoice {
  id          String        @id @default(cuid())
  number      String        @unique
  amount      Float
  currency    String        @default("EUR")
  status      InvoiceStatus @default(DRAFT)
  dueDate     DateTime?
  paidAt      DateTime?
  notes       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // Kunde-Beziehung
  customerId  String
  customer    Customer      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  
  // Rechnungspositionen
  items       InvoiceItem[]
  
  @@map("invoices")
}

model InvoiceItem {
  id          String  @id @default(cuid())
  description String
  quantity    Int     @default(1)
  unitPrice   Float
  totalPrice  Float
  
  // Rechnung-Beziehung
  invoiceId   String
  invoice     Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  
  @@map("invoice_items")
}

// ===== KI-INTEGRATION LOGS =====

model AiInteraction {
  id          String     @id @default(cuid())
  provider    AiProvider
  model       String?    // z.B. "gpt-4", "claude-3", "llama3.1"
  prompt      String
  response    String
  tokenUsed   Int?
  cost        Float?
  duration    Int?       // in milliseconds
  createdAt   DateTime   @default(now())
  
  // Optional: Projekt-Beziehung
  projectId   String?
  project     Project?   @relation(fields: [projectId], references: [id], onDelete: SetNull)
  
  @@map("ai_interactions")
}

// ===== ENUMS als String-Felder =====

// Ersetze Enums durch String-Felder mit Constraints

model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  status      String        @default("DRAFT") // ProjectStatus als String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // Kunde-Beziehung
  customerId  String
  customer    Customer      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  
  // Projektdaten (als String für SQLite)
  config      String?       // Projekt-Konfiguration (JSON als String)
  content     String?       // Inhalte (JSON als String)
  
  // Beziehungen
  versions    ProjectVersion[]
  exports     ProjectExport[]
  aiInteractions AiInteraction[] // Hinzugefügte Beziehung
  
  @@map("projects")
}

model ProjectExport {
  id          String     @id @default(cuid())
  filename    String
  filePath    String
  fileSize    Int
  exportType  String     @default("ZIP") // ExportType als String
  createdAt   DateTime   @default(now())
  
  // Projekt-Beziehung
  projectId   String
  project     Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@map("project_exports")
}

model Section {
  id          String      @id @default(cuid())
  name        String
  type        String      // SectionType als String
  description String?
  thumbnail   String?
  data        String      // Sektion-Struktur (JSON als String)
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  @@map("sections")
}

model Invoice {
  id          String        @id @default(cuid())
  number      String        @unique
  amount      Float
  currency    String        @default("EUR")
  status      String        @default("DRAFT") // InvoiceStatus als String
  dueDate     DateTime?
  paidAt      DateTime?
  notes       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // Kunde-Beziehung
  customerId  String
  customer    Customer      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  
  // Rechnungspositionen
  items       InvoiceItem[]
  
  @@map("invoices")
}

model AiInteraction {
  id          String     @id @default(cuid())
  provider    String     // AiProvider als String
  model       String?    // z.B. "gpt-4", "claude-3", "llama3.1"
  prompt      String
  response    String
  tokenUsed   Int?
  cost        Float?
  duration    Int?       // in milliseconds
  createdAt   DateTime   @default(now())
  
  // Optional: Projekt-Beziehung
  projectId   String?
  project     Project?   @relation(fields: [projectId], references: [id], onDelete: SetNull)
  
  @@map("ai_interactions")
}

// Entferne alle Enum-Definitionen für SQLite